{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.3.2\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2020 Adam Shaw\n*/\nimport { createElement, Fragment, config, isValidDate, addDays, createPlugin } from '@fullcalendar/common';\nvar RELEASE_DATE = '2020-11-12'; // for Scheduler\n\nvar UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too\n\nvar INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid';\nvar OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated';\nvar PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];\nvar CSS = {\n  position: 'absolute',\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px'\n};\n\nfunction buildLicenseWarning(context) {\n  var key = context.options.schedulerLicenseKey;\n\n  if (!isImmuneUrl(window.location.href)) {\n    var status_1 = processLicenseKey(key);\n\n    if (status_1 !== 'valid') {\n      return createElement(\"div\", {\n        className: \"fc-license-message\",\n        style: CSS\n      }, status_1 === 'outdated' ? createElement(Fragment, null, 'Your license key is too old to work with this version. ', createElement(\"a\", {\n        href: OUTDATED_LICENSE_URL\n      }, \"More Info\")) : createElement(Fragment, null, 'Your license key is invalid. ', createElement(\"a\", {\n        href: INVALID_LICENSE_URL\n      }, \"More Info\")));\n    }\n  }\n\n  return null;\n}\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\n\n\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid';\n  }\n\n  var parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/);\n\n  if (parts && parts[1].length === 10) {\n    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);\n    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE);\n\n    if (isValidDate(releaseDate)) {\n      // token won't be replaced in dev mode\n      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW);\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid';\n      }\n\n      return 'outdated';\n    }\n  }\n\n  return 'invalid';\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url);\n}\n\nvar OPTION_REFINERS = {\n  schedulerLicenseKey: String\n};\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning]\n});\nexport default main;","map":{"version":3,"sources":["src/license.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":";;;;;;AAEA,IAAM,YAAY,GAAG,YAArB,C,CAAyC;;AACzC,IAAM,cAAc,GAAG,MAAM,CAA7B,C,CAA8B;;AAC9B,IAAM,mBAAmB,GAAG,yDAA5B;AACA,IAAM,oBAAoB,GAAG,0DAA7B;AACA,IAAM,mBAAmB,GAAG,CAC1B,+BAD0B,EAE1B,4CAF0B,CAA5B;AAIA,IAAM,GAAG,GAAG;AACV,EAAA,QAAQ,EAAE,UADA;AAEV,EAAA,MAAM,EAAE,KAFE;AAGV,EAAA,MAAM,EAAE,KAHE;AAIV,EAAA,IAAI,EAAE,KAJI;AAKV,EAAA,UAAU,EAAE,MALF;AAMV,EAAA,WAAW,EAAE,MANH;AAOV,EAAA,WAAW,EAAE,OAPH;AAQV,EAAA,WAAW,EAAE,aARH;AASV,EAAA,OAAO,EAAE,SATC;AAUV,EAAA,QAAQ,EAAE,MAVA;AAWV,EAAA,oBAAoB,EAAE;AAXZ,CAAZ;;SAcgB,mB,CAAoB,O,EAAwB;AAC1D,MAAI,GAAG,GAAG,OAAO,CAAC,OAAR,CAAgB,mBAA1B;;AAEA,MAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAjB,CAAhB,EAAwC;AACtC,QAAI,QAAM,GAAG,iBAAiB,CAAC,GAAD,CAA9B;;AAEA,QAAI,QAAM,KAAK,OAAf,EAAwB;AACtB,aACE,aAAA,CAAA,KAAA,EAAA;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAoC,QAAA,KAAK,EAAE;AAA3C,OAAA,EACI,QAAM,KAAK,UAAZ,GACC,aAAA,CAAC,QAAD,EAAS,IAAT,EACG,yDADH,EAEE,aAAA,CAAA,GAAA,EAAA;AAAG,QAAA,IAAI,EAAE;AAAT,OAAA,EAA6B,WAA7B,CAFF,CADD,GAMC,aAAA,CAAC,QAAD,EAAS,IAAT,EACG,+BADH,EAEE,aAAA,CAAA,GAAA,EAAA;AAAG,QAAA,IAAI,EAAE;AAAT,OAAA,EAA4B,WAA5B,CAFF,CAPJ,CADF;AAeD;AACF;;AAED,SAAO,IAAP;AACD;AAED;;;;;AAGA,SAAS,iBAAT,CAA2B,GAA3B,EAA8B;AAC5B,MAAI,mBAAmB,CAAC,OAApB,CAA4B,GAA5B,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,WAAO,OAAP;AACD;;AAED,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,EAAR,EAAY,KAAZ,CAAkB,mBAAlB,CAAd;;AAEA,MAAI,KAAK,IAAK,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,KAAoB,EAAlC,EAAuC;AACrC,QAAM,YAAY,GAAG,IAAI,IAAJ,CAAS,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,IAAlC,CAArB;AACA,QAAM,WAAW,GAAG,IAAI,IAAJ,CAAS,MAAM,CAAC,wBAAP,IAAmC,YAA5C,CAApB;;AAEA,QAAI,WAAW,CAAC,WAAD,CAAf,EAA8B;AAAA;AAC5B,UAAM,eAAe,GAAG,OAAO,CAAC,WAAD,EAAc,CAAC,cAAf,CAA/B;;AAEA,UAAI,eAAe,GAAG,YAAtB,EAAoC;AAClC,eAAO,OAAP;AACD;;AAED,aAAO,UAAP;AACD;AACF;;AAED,SAAO,SAAP;AACD;;AAED,SAAS,WAAT,CAAqB,GAArB,EAAwB;AACtB,SAAO,uDAAuD,IAAvD,CAA4D,GAA5D,CAAP;AACF;;AClFO,IAAM,eAAe,GAAG;AAC7B,EAAA,mBAAmB,EAAE;AADQ,CAAxB;ACKP,IAAA,IAAA,GAAe,YAAY,CAAC;AAC1B,EAAA,cAAc,EAAE,eADU;AAE1B,EAAA,oBAAoB,EAAE,CAAC,mBAAD;AAFI,CAAD,CAA3B","sourcesContent":["import { config, isValidDate, addDays, createElement, CalendarContext, Fragment } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst INVALID_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#invalid'\nconst OUTDATED_LICENSE_URL = 'http://fullcalendar.io/docs/schedulerLicenseKey#outdated'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives',\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px',\n}\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n\n  if (!isImmuneUrl(window.location.href)) {\n    let status = processLicenseKey(key)\n\n    if (status !== 'valid') {\n      return (\n        <div className=\"fc-license-message\" style={CSS}>\n          {(status === 'outdated') ? (\n            <Fragment>\n              {'Your license key is too old to work with this version. '}\n              <a href={OUTDATED_LICENSE_URL}>More Info</a>\n            </Fragment>\n          ) : (\n            <Fragment>\n              {'Your license key is invalid. '}\n              <a href={INVALID_LICENSE_URL}>More Info</a>\n            </Fragment>\n          )}\n        </div>\n      )\n    }\n  }\n\n  return null\n}\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction processLicenseKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return 'valid'\n  }\n\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n\n      if (minPurchaseDate < purchaseDate) {\n        return 'valid'\n      }\n\n      return 'outdated'\n    }\n  }\n\n  return 'invalid'\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n","export const OPTION_REFINERS = {\n  schedulerLicenseKey: String,\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning],\n})\n"]},"metadata":{},"sourceType":"module"}