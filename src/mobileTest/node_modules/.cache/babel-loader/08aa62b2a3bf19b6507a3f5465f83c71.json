{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wangm1\\\\comp4960-section1-black-team\\\\comp4960-section1-black-team\\\\src\\\\client\\\\src\\\\pages\\\\rooms\\\\Rooms.js\";\nimport React from 'react';\nimport { BootstrapTable, ButtonGroup, DeleteButton, InsertButton, InsertModalHeader, InsertModalFooter, SearchField, TableHeaderColumn } from 'react-bootstrap-table';\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\nimport $ from 'jquery';\nimport Alert from 'react-s-alert';\n\nclass Rooms extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.createCustomInsertButton = () => {\n      return /*#__PURE__*/React.createElement(InsertButton, {\n        btnText: \"Insert Room\",\n        btnContextual: \"btn-success\",\n        className: \"add-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.createCustomDeleteButton = () => {\n      return /*#__PURE__*/React.createElement(DeleteButton, {\n        btnText: \"Delete Room\",\n        btnContextual: \"btn-danger\",\n        className: \"delete-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.createCustomModalHeader = () => {\n      return /*#__PURE__*/React.createElement(InsertModalHeader, {\n        className: \"modal-header\",\n        title: \"Add Room\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.createCustomModalFooter = closeModal => {\n      return /*#__PURE__*/React.createElement(InsertModalFooter, {\n        className: \"modal-footer\",\n        closeBtnContextual: \"btn-light\",\n        saveBtnContextual: \"btn-success\",\n        closeBtnClass: \"modal-close-btn\",\n        saveBtnClass: \"modal-save-btn\",\n        onModalClose: () => this.handleModalClose(closeModal),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.createCustomButtonGroup = props => {\n      return /*#__PURE__*/React.createElement(ButtonGroup, {\n        sizeClass: \"btn-group-md\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }\n      }, props.showSelectedOnlyBtn, props.insertBtn, props.deleteBtn, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: `btn btn-info edit-mode-btn`,\n        onClick: () => this.setState({\n          editMode: !this.state.editMode\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 17\n        }\n      }, this.state.editMode ? \"Exit Edit Mode\" : \"Edit Mode\"), this.state.deletedRows.length > 0 ? /*#__PURE__*/React.createElement(\"button\", {\n        type: \"button\",\n        className: `btn btn-warning undo-btn`,\n        onClick: this.onUndo.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }\n      }, \"Undo Delete\") : null);\n    };\n\n    this.createCustomSearchField = () => {\n      return /*#__PURE__*/React.createElement(SearchField, {\n        className: \"search-field\",\n        style: {\n          height: 40,\n          fontSize: 15\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }\n      });\n    };\n\n    this.tableProps = {\n      onAddRow: this.addRowHook.bind(this),\n      onDeleteRow: this.deleteRowHook.bind(this),\n      insertBtn: this.createCustomInsertButton,\n      deleteBtn: this.createCustomDeleteButton,\n      insertModalHeader: this.createCustomModalHeader,\n      insertModalFooter: this.createCustomModalFooter,\n      btnGroup: this.createCustomButtonGroup,\n      searchField: this.createCustomSearchField,\n      clearSearch: true,\n      handleConfirmDeleteRow: this.onConfirmDeleteRow.bind(this)\n    };\n    this.cellEditProps = {\n      mode: 'click',\n      blurToSave: true,\n      beforeSaveCell: this.beforeSaveHook.bind(this)\n    };\n    this.getData();\n    this.state = {\n      data: [],\n      editMode: false,\n      deletedRows: []\n    };\n  }\n\n  getData() {\n    $.ajax({\n      method: \"GET\",\n      url: \"/Room/all\",\n      type: \"json\",\n      contentType: \"application/json\",\n      success: response => {\n        this.setState({\n          data: response\n        });\n      }\n    }).catch(function (xhr, status, error) {\n      Alert.error('Unable to load table data.', {\n        position: 'top-right',\n        effect: 'stackslide',\n        timeout: 2000\n      });\n      this.setState({\n        data: []\n      });\n    });\n  }\n\n  addRowHook(row) {\n    // Clear our the id field since the backend will auto generate one for us\n    row.id = null;\n    row.isNew = true;\n    this.addRowAjaxCall(row);\n  } // We use this call here when we do not want to delete the row id\n\n\n  addRowAjaxCall(row) {\n    const data = this.state.data;\n    $.ajax({\n      method: \"POST\",\n      url: \"/Room/saveRoom\",\n      data: JSON.stringify(row),\n      type: \"json\",\n      contentType: \"application/json\",\n      success: response => {\n        data.push(response);\n        this.setState({\n          data: data\n        });\n        Alert.success(\"Room added.\", {\n          position: 'top-right',\n          effect: 'stackslide',\n          timeout: 2000\n        });\n      }\n    }).catch(function (xhr, status, error) {\n      Alert.error(\"Error saving row.\", {\n        position: 'top-right',\n        effect: 'stackslide',\n        timeout: 2000\n      });\n    });\n  }\n\n  deleteRowHook(rowIdsToDelete) {\n    const data = this.state.data;\n    const rowsToDelete = data.filter(row => rowIdsToDelete.includes(row.id));\n    const currentDeletedRows = this.state.deletedRows;\n    currentDeletedRows.push(rowsToDelete);\n    this.setState({\n      deletedRows: currentDeletedRows\n    });\n    $.ajax({\n      method: \"POST\",\n      url: \"/Room/deleteRoom\",\n      data: JSON.stringify(rowIdsToDelete),\n      type: \"json\",\n      contentType: \"application/json\",\n      success: response => {\n        this.setState({\n          data: data.filter(row => !rowIdsToDelete.includes(row.id))\n        });\n        Alert.success(\"Row(s) deleted.\", {\n          position: 'top-right',\n          effect: 'stackslide',\n          timeout: 2000\n        });\n      }\n    }).catch(function (xhr, status, error) {\n      Alert.error(\"Error deleting row(s).\", {\n        position: 'top-right',\n        effect: 'stackslide',\n        timeout: 2000\n      });\n    });\n  }\n\n  beforeSaveHook(row, cellName, cellValue, done) {\n    let mockRow = { ...row\n    };\n    mockRow[cellName] = cellValue;\n\n    if (row[cellName] === mockRow[cellName]) {\n      return true;\n    }\n\n    $.ajax({\n      method: \"POST\",\n      url: \"/Room/saveRoom\",\n      data: JSON.stringify(mockRow),\n      type: \"json\",\n      contentType: \"application/json\",\n      success: response => {\n        done(true);\n        Alert.success(\"Row updated.\", {\n          position: 'top-right',\n          effect: 'stackslide',\n          timeout: 2000\n        });\n      }\n    }).catch(function (xhr, status, error) {\n      Alert.error(\"Error saving row.\", {\n        position: 'top-right',\n        effect: 'stackslide',\n        timeout: 2000\n      });\n      done(false);\n    });\n    return 1;\n  }\n\n  onConfirmDeleteRow(next, dropRowKeys) {\n    next();\n  }\n\n  onUndo() {\n    // When we undo, add back the deleted rows\n    const deletedRows = this.state.deletedRows.pop();\n    deletedRows.forEach(row => this.addRowAjaxCall(row));\n  }\n\n  cannotBeEmptyValidator(value, row) {\n    const response = {\n      isValid: true,\n      notification: {\n        type: 'success',\n        msg: '',\n        title: ''\n      }\n    };\n\n    if (!value) {\n      response.isValid = false;\n      response.notification.type = 'error';\n      response.notification.msg = 'Value must be inserted';\n      response.notification.title = 'Requested Value';\n    }\n\n    return response;\n  }\n\n  roomNameValidator(value, row) {\n    const response = {\n      isValid: true,\n      notification: {\n        type: 'success',\n        msg: '',\n        title: ''\n      }\n    }; // check for empty input\n\n    if (!value) {\n      response.isValid = false;\n      response.notification.type = 'error';\n      response.notification.msg = 'Value must be inserted';\n      response.notification.title = 'Requested Value';\n    } // check for duplicate entry (case insensitive)\n    else if (!!value && this.state.data.filter(tableRow => tableRow[\"name\"].toUpperCase() === value.toUpperCase() && tableRow[\"id\"] !== row[\"id\"]).length >= 1) {\n        response.isValid = false;\n        response.notification.type = 'error';\n        response.notification.msg = 'Room entered exists';\n        response.notification.title = 'Invalid Entry';\n      }\n\n    return response;\n  }\n\n  capacityValidator(value, row) {\n    const response = {\n      isValid: true,\n      notification: {\n        type: 'success',\n        msg: '',\n        title: ''\n      }\n    };\n    const MAX_CAPACITY = 200; // check for empty input\n\n    if (!value) {\n      response.isValid = false;\n      response.notification.type = 'error';\n      response.notification.msg = 'Value must be inserted';\n      response.notification.title = 'Requested Value';\n    } // check for max capacity\n    else if (value > MAX_CAPACITY || value < 0) {\n        response.isValid = false;\n        response.notification.type = 'error';\n        response.notification.msg = 'Cannot exceed max capacity';\n        response.notification.title = 'Requested Value';\n      }\n\n    return response;\n  }\n\n  handleModalClose(closeModal) {\n    closeModal();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    }, \"Rooms\"))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(BootstrapTable, {\n      hover: true,\n      condensed: true,\n      data: this.state.data,\n      search: true,\n      version: \"4\",\n      insertRow: true,\n      deleteRow: true,\n      selectRow: {\n        mode: 'checkbox'\n      },\n      options: this.tableProps,\n      cellEdit: this.state.editMode ? this.cellEditProps : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      hidden: true,\n      hiddenOninsert: true,\n      autoValue: true,\n      isKey: true,\n      dataField: \"id\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 25\n      }\n    }, \"id\"), /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      dataField: \"name\",\n      editable: {\n        validator: this.roomNameValidator.bind(this)\n      },\n      dataSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 25\n      }\n    }, \"Room Name\"), /*#__PURE__*/React.createElement(TableHeaderColumn, {\n      dataField: \"capacity\",\n      editable: {\n        validator: this.capacityValidator.bind(this)\n      },\n      dataSort: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 25\n      }\n    }, \"Capacity\"))));\n  }\n\n}\n\nexport default Rooms;","map":{"version":3,"sources":["C:/Users/wangm1/comp4960-section1-black-team/comp4960-section1-black-team/src/client/src/pages/rooms/Rooms.js"],"names":["React","BootstrapTable","ButtonGroup","DeleteButton","InsertButton","InsertModalHeader","InsertModalFooter","SearchField","TableHeaderColumn","$","Alert","Rooms","Component","constructor","props","createCustomInsertButton","createCustomDeleteButton","createCustomModalHeader","createCustomModalFooter","closeModal","handleModalClose","createCustomButtonGroup","showSelectedOnlyBtn","insertBtn","deleteBtn","setState","editMode","state","deletedRows","length","onUndo","bind","createCustomSearchField","height","fontSize","tableProps","onAddRow","addRowHook","onDeleteRow","deleteRowHook","insertModalHeader","insertModalFooter","btnGroup","searchField","clearSearch","handleConfirmDeleteRow","onConfirmDeleteRow","cellEditProps","mode","blurToSave","beforeSaveCell","beforeSaveHook","getData","data","ajax","method","url","type","contentType","success","response","catch","xhr","status","error","position","effect","timeout","row","id","isNew","addRowAjaxCall","JSON","stringify","push","rowIdsToDelete","rowsToDelete","filter","includes","currentDeletedRows","cellName","cellValue","done","mockRow","next","dropRowKeys","pop","forEach","cannotBeEmptyValidator","value","isValid","notification","msg","title","roomNameValidator","tableRow","toUpperCase","capacityValidator","MAX_CAPACITY","render","validator"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {\r\n    BootstrapTable,\r\n    ButtonGroup,\r\n    DeleteButton,\r\n    InsertButton,\r\n    InsertModalHeader,\r\n    InsertModalFooter,\r\n    SearchField,\r\n    TableHeaderColumn\r\n} from 'react-bootstrap-table';\r\nimport '../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css';\r\nimport $ from 'jquery';\r\nimport Alert from 'react-s-alert';\r\n\r\nclass Rooms extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getData();\r\n        this.state = {\r\n            data: [],\r\n            editMode: false,\r\n            deletedRows: []\r\n        };\r\n    }\r\n\r\n    getData() {\r\n        $.ajax({\r\n            method: \"GET\",\r\n            url: \"/Room/all\",\r\n            type: \"json\",\r\n            contentType: \"application/json\",\r\n            success: (response) => {\r\n                this.setState({\r\n                    data: response\r\n                });\r\n            }\r\n        }).catch(function (xhr, status, error) {\r\n            Alert.error('Unable to load table data.', {\r\n                position: 'top-right',\r\n                effect: 'stackslide',\r\n                timeout: 2000\r\n            });\r\n\r\n            this.setState({\r\n                data: []\r\n            });\r\n        });\r\n    }\r\n\r\n    addRowHook(row) {\r\n        // Clear our the id field since the backend will auto generate one for us\r\n        row.id = null;\r\n        row.isNew = true;\r\n        this.addRowAjaxCall(row);\r\n    }\r\n\r\n    // We use this call here when we do not want to delete the row id\r\n    addRowAjaxCall(row) {\r\n        const data = this.state.data;\r\n\r\n        $.ajax({\r\n            method: \"POST\",\r\n            url: \"/Room/saveRoom\",\r\n            data: JSON.stringify(row),\r\n            type: \"json\",\r\n            contentType: \"application/json\",\r\n            success: (response) => {\r\n                data.push(response);\r\n                this.setState({\r\n                    data: data\r\n                });\r\n                Alert.success(\"Room added.\", {\r\n                    position: 'top-right',\r\n                    effect: 'stackslide',\r\n                    timeout: 2000\r\n                });\r\n            }\r\n        }).catch(function (xhr, status, error) {\r\n            Alert.error(\"Error saving row.\", {\r\n                position: 'top-right',\r\n                effect: 'stackslide',\r\n                timeout: 2000\r\n            });\r\n        });\r\n    }\r\n\r\n    deleteRowHook(rowIdsToDelete) {\r\n        const data = this.state.data;\r\n        const rowsToDelete = data.filter((row) => rowIdsToDelete.includes(row.id));\r\n\r\n        const currentDeletedRows = this.state.deletedRows;\r\n        currentDeletedRows.push(rowsToDelete);\r\n\r\n        this.setState({ deletedRows: currentDeletedRows });\r\n\r\n        $.ajax({\r\n            method: \"POST\",\r\n            url: \"/Room/deleteRoom\",\r\n            data: JSON.stringify(rowIdsToDelete),\r\n            type: \"json\",\r\n            contentType: \"application/json\",\r\n            success: (response) => {\r\n                this.setState({ data: data.filter((row) => !rowIdsToDelete.includes(row.id)) });\r\n\r\n                Alert.success(\"Row(s) deleted.\", {\r\n                    position: 'top-right',\r\n                    effect: 'stackslide',\r\n                    timeout: 2000\r\n                });\r\n            }\r\n        }).catch(function (xhr, status, error) {\r\n            Alert.error(\"Error deleting row(s).\", {\r\n                position: 'top-right',\r\n                effect: 'stackslide',\r\n                timeout: 2000\r\n            });\r\n        });\r\n    }\r\n\r\n    beforeSaveHook(row, cellName, cellValue, done) {\r\n        let mockRow = { ...row };\r\n        mockRow[cellName] = cellValue;\r\n\r\n        if (row[cellName] === mockRow[cellName]) {\r\n            return true;\r\n        }\r\n\r\n        $.ajax({\r\n            method: \"POST\",\r\n            url: \"/Room/saveRoom\",\r\n            data: JSON.stringify(mockRow),\r\n            type: \"json\",\r\n            contentType: \"application/json\",\r\n            success: (response) => {\r\n                done(true);\r\n                Alert.success(\"Row updated.\", {\r\n                    position: 'top-right',\r\n                    effect: 'stackslide',\r\n                    timeout: 2000\r\n                });\r\n            }\r\n        }).catch(function (xhr, status, error) {\r\n            Alert.error(\"Error saving row.\", {\r\n                position: 'top-right',\r\n                effect: 'stackslide',\r\n                timeout: 2000\r\n            });\r\n            done(false);\r\n        });\r\n\r\n        return 1;\r\n    }\r\n\r\n    onConfirmDeleteRow(next, dropRowKeys) {\r\n        next();\r\n    }\r\n\r\n    onUndo() {\r\n        // When we undo, add back the deleted rows\r\n        const deletedRows = this.state.deletedRows.pop();\r\n        deletedRows.forEach((row) => this.addRowAjaxCall(row));\r\n    }\r\n\r\n    cannotBeEmptyValidator(value, row) {\r\n        const response = { isValid: true, notification: { type: 'success', msg: '', title: '' } };\r\n        if (!value) {\r\n            response.isValid = false;\r\n            response.notification.type = 'error';\r\n            response.notification.msg = 'Value must be inserted';\r\n            response.notification.title = 'Requested Value';\r\n        }\r\n        return response;\r\n    }\r\n\r\n    roomNameValidator(value, row) {\r\n        const response = { isValid: true, notification: { type: 'success', msg: '', title: '' } };\r\n        // check for empty input\r\n        if (!value) {\r\n            response.isValid = false;\r\n            response.notification.type = 'error';\r\n            response.notification.msg = 'Value must be inserted';\r\n            response.notification.title = 'Requested Value';\r\n        }\r\n        // check for duplicate entry (case insensitive)\r\n        else if (!!value && this.state.data.filter(\r\n            (tableRow) => (tableRow[\"name\"].toUpperCase() === value.toUpperCase()) && tableRow[\"id\"] !== row[\"id\"]).length >= 1) {\r\n            response.isValid = false;\r\n            response.notification.type = 'error';\r\n            response.notification.msg = 'Room entered exists';\r\n            response.notification.title = 'Invalid Entry'\r\n        }\r\n        return response;\r\n    }\r\n\r\n    capacityValidator(value, row) {\r\n        const response = { isValid: true, notification: { type: 'success', msg: '', title: '' } };\r\n        const MAX_CAPACITY = 200;\r\n        // check for empty input\r\n        if (!value) {\r\n            response.isValid = false;\r\n            response.notification.type = 'error';\r\n            response.notification.msg = 'Value must be inserted';\r\n            response.notification.title = 'Requested Value';\r\n        }\r\n        // check for max capacity\r\n        else if (value > MAX_CAPACITY || value < 0) {\r\n            response.isValid = false;\r\n            response.notification.type = 'error';\r\n            response.notification.msg = 'Cannot exceed max capacity';\r\n            response.notification.title = 'Requested Value';\r\n        }\r\n        return response;\r\n    }\r\n\r\n    createCustomInsertButton = () => {\r\n        return (\r\n            <InsertButton\r\n                btnText='Insert Room'\r\n                btnContextual='btn-success'\r\n                className='add-btn' />\r\n        );\r\n    };\r\n\r\n    createCustomDeleteButton = () => {\r\n        return (\r\n            <DeleteButton\r\n                btnText='Delete Room'\r\n                btnContextual='btn-danger'\r\n                className='delete-btn' />\r\n        );\r\n    };\r\n\r\n    createCustomModalHeader = () => {\r\n        return (\r\n            <InsertModalHeader\r\n                className='modal-header'\r\n                title='Add Room' />\r\n        );\r\n    };\r\n\r\n    handleModalClose(closeModal) {\r\n        closeModal();\r\n    };\r\n\r\n    createCustomModalFooter = (closeModal) => {\r\n        return (\r\n            <InsertModalFooter\r\n                className='modal-footer'\r\n                closeBtnContextual='btn-light'\r\n                saveBtnContextual='btn-success'\r\n                closeBtnClass='modal-close-btn'\r\n                saveBtnClass='modal-save-btn'\r\n                onModalClose={ () => this.handleModalClose(closeModal) }/>\r\n        );\r\n    };\r\n\r\n    createCustomButtonGroup = props => {\r\n        return (\r\n            <ButtonGroup sizeClass='btn-group-md'>\r\n                {props.showSelectedOnlyBtn}\r\n                {props.insertBtn}\r\n                {props.deleteBtn}\r\n                <button type='button'\r\n                        className={`btn btn-info edit-mode-btn`}\r\n                        onClick={() => this.setState({ editMode: !this.state.editMode })}>\r\n                    {this.state.editMode ? \"Exit Edit Mode\" : \"Edit Mode\"}\r\n                </button>\r\n                {this.state.deletedRows.length > 0 ?\r\n                    <button type='button'\r\n                            className={`btn btn-warning undo-btn`}\r\n                            onClick={this.onUndo.bind(this)}>\r\n                        Undo Delete\r\n                    </button> : null}\r\n            </ButtonGroup>\r\n        );\r\n    };\r\n\r\n    createCustomSearchField = () => {\r\n        return (\r\n            <SearchField\r\n                className='search-field'\r\n                style={{ height: 40, fontSize: 15 }} />\r\n        );\r\n    };\r\n\r\n    tableProps = {\r\n        onAddRow: this.addRowHook.bind(this),\r\n        onDeleteRow: this.deleteRowHook.bind(this),\r\n        insertBtn: this.createCustomInsertButton,\r\n        deleteBtn: this.createCustomDeleteButton,\r\n        insertModalHeader: this.createCustomModalHeader,\r\n        insertModalFooter: this.createCustomModalFooter,\r\n        btnGroup: this.createCustomButtonGroup,\r\n        searchField: this.createCustomSearchField,\r\n        clearSearch: true,\r\n        handleConfirmDeleteRow: this.onConfirmDeleteRow.bind(this)\r\n    };\r\n\r\n    cellEditProps = {\r\n        mode: 'click',\r\n        blurToSave: true,\r\n        beforeSaveCell: this.beforeSaveHook.bind(this)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"card\">\r\n                    <div className=\"card-header\">\r\n                        <h3>Rooms</h3>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <BootstrapTable hover\r\n                                    condensed\r\n                                    data={this.state.data}\r\n                                    search\r\n                                    version='4'\r\n                                    insertRow\r\n                                    deleteRow\r\n                                    selectRow={{ mode: 'checkbox' }}\r\n                                    options={this.tableProps}\r\n                                    cellEdit={this.state.editMode ? this.cellEditProps : {}}>\r\n                        <TableHeaderColumn hidden\r\n                                           hiddenOninsert\r\n                                           autoValue\r\n                                           isKey\r\n                                           dataField='id'>id</TableHeaderColumn>\r\n                        <TableHeaderColumn dataField='name'\r\n                                           editable={{ validator: this.roomNameValidator.bind(this)}}\r\n                                           dataSort={ true }>Room Name</TableHeaderColumn>\r\n                        <TableHeaderColumn dataField='capacity'\r\n                                           editable={{ validator: this.capacityValidator.bind(this) }}\r\n                                           dataSort={ true }>Capacity</TableHeaderColumn>\r\n                    </BootstrapTable>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Rooms\r\n"]},"metadata":{},"sourceType":"module"}