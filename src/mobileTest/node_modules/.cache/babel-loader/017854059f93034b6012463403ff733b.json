{"ast":null,"code":"/* eslint-disable no-magic-numbers */\nconst rgbToHex = color => {\n  if (typeof color === 'undefined') {\n    throw new TypeError('Hex color is not defined');\n  }\n\n  if (color === 'transparent') {\n    return '#00000000';\n  }\n\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\n\n  if (!rgb) {\n    throw new Error(`${color} is not a valid rgb color`);\n  }\n\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`;\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`;\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`;\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`;\n};\n\nexport default rgbToHex;","map":{"version":3,"sources":["C:/Users/wangm1/comp4960-section1-black-team/comp4960-section1-black-team/node_modules/@coreui/utils/src/rgb-to-hex.js"],"names":["rgbToHex","color","TypeError","rgb","match","Error","r","parseInt","toString","g","b","slice"],"mappings":"AAAA;AACA,MAAMA,QAAQ,GAAGC,KAAK,IAAI;AACxB,MAAI,OAAOA,KAAP,KAAiB,WAArB,EAAkC;AAChC,UAAM,IAAIC,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAID,KAAK,KAAK,aAAd,EAA6B;AAC3B,WAAO,WAAP;AACD;;AAED,QAAME,GAAG,GAAGF,KAAK,CAACG,KAAN,CAAY,sEAAZ,CAAZ;;AAEA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIE,KAAJ,CAAW,GAAEJ,KAAM,2BAAnB,CAAN;AACD;;AAED,QAAMK,CAAC,GAAI,IAAGC,QAAQ,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,CAAqBK,QAArB,CAA8B,EAA9B,CAAkC,EAAhD;AACA,QAAMC,CAAC,GAAI,IAAGF,QAAQ,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,CAAqBK,QAArB,CAA8B,EAA9B,CAAkC,EAAhD;AACA,QAAME,CAAC,GAAI,IAAGH,QAAQ,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAAS,EAAT,CAAR,CAAqBK,QAArB,CAA8B,EAA9B,CAAkC,EAAhD;AAEA,SAAQ,IAAGF,CAAC,CAACK,KAAF,CAAQ,CAAC,CAAT,CAAY,GAAEF,CAAC,CAACE,KAAF,CAAQ,CAAC,CAAT,CAAY,GAAED,CAAC,CAACC,KAAF,CAAQ,CAAC,CAAT,CAAY,EAAnD;AACD,CApBD;;AAsBA,eAAeX,QAAf","sourcesContent":["/* eslint-disable no-magic-numbers */\r\nconst rgbToHex = color => {\r\n  if (typeof color === 'undefined') {\r\n    throw new TypeError('Hex color is not defined')\r\n  }\r\n\r\n  if (color === 'transparent') {\r\n    return '#00000000'\r\n  }\r\n\r\n  const rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i)\r\n\r\n  if (!rgb) {\r\n    throw new Error(`${color} is not a valid rgb color`)\r\n  }\r\n\r\n  const r = `0${parseInt(rgb[1], 10).toString(16)}`\r\n  const g = `0${parseInt(rgb[2], 10).toString(16)}`\r\n  const b = `0${parseInt(rgb[3], 10).toString(16)}`\r\n\r\n  return `#${r.slice(-2)}${g.slice(-2)}${b.slice(-2)}`\r\n}\r\n\r\nexport default rgbToHex\r\n"]},"metadata":{},"sourceType":"module"}