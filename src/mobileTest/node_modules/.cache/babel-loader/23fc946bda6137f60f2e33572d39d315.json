{"ast":null,"code":"/*!\nFullCalendar Scheduler v5.3.1\nDocs & License: https://fullcalendar.io/scheduler\n(c) 2020 Adam Shaw\n*/\nimport { createElement, config, isValidDate, addDays, createPlugin } from '@fullcalendar/common';\nvar RELEASE_DATE = '2020-09-04'; // for Scheduler\n\nvar UPGRADE_WINDOW = 365 + 7; // days. 1 week leeway, for tz shift reasons too\n\nvar LICENSE_INFO_URL = 'http://fullcalendar.io/scheduler/license/';\nvar PRESET_LICENSE_KEYS = ['GPL-My-Project-Is-Open-Source', 'CC-Attribution-NonCommercial-NoDerivatives'];\nvar CSS = {\n  position: 'absolute',\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px'\n};\n\nfunction buildLicenseWarning(context) {\n  var key = context.options.schedulerLicenseKey;\n\n  if (!isImmuneUrl(window.location.href) && !isValidKey(key)) {\n    return createElement(\"div\", {\n      className: 'fc-license-message',\n      style: CSS\n    }, \"Please use a valid license key. \", createElement(\"a\", {\n      href: LICENSE_INFO_URL\n    }, \"More Info\"));\n  }\n}\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\n\n\nfunction isValidKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return true;\n  }\n\n  var parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/);\n\n  if (parts && parts[1].length === 10) {\n    var purchaseDate = new Date(parseInt(parts[2], 10) * 1000);\n    var releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE);\n\n    if (isValidDate(releaseDate)) {\n      // token won't be replaced in dev mode\n      var minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW);\n\n      if (minPurchaseDate < purchaseDate) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url);\n}\n\nvar OPTION_REFINERS = {\n  schedulerLicenseKey: String\n};\nvar main = createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [buildLicenseWarning]\n});\nexport default main;","map":{"version":3,"sources":["src/license.tsx","src/options.ts","src/main.ts"],"names":[],"mappings":";;;;;;AAEA,IAAM,YAAY,GAAG,YAArB,C,CAAyC;;AACzC,IAAM,cAAc,GAAG,MAAM,CAA7B,C,CAA8B;;AAC9B,IAAM,gBAAgB,GAAG,2CAAzB;AACA,IAAM,mBAAmB,GAAG,CAC1B,+BAD0B,EAE1B,4CAF0B,CAA5B;AAIA,IAAM,GAAG,GAAG;AACV,EAAA,QAAQ,EAAE,UADA;AAEV,EAAA,MAAM,EAAE,KAFE;AAGV,EAAA,MAAM,EAAE,KAHE;AAIV,EAAA,IAAI,EAAE,KAJI;AAKV,EAAA,UAAU,EAAE,MALF;AAMV,EAAA,WAAW,EAAE,MANH;AAOV,EAAA,WAAW,EAAE,OAPH;AAQV,EAAA,WAAW,EAAE,aARH;AASV,EAAA,OAAO,EAAE,SATC;AAUV,EAAA,QAAQ,EAAE,MAVA;AAWV,EAAA,oBAAoB,EAAE;AAXZ,CAAZ;;SAegB,mB,CAAoB,O,EAAwB;AAC1D,MAAI,GAAG,GAAG,OAAO,CAAC,OAAR,CAAgB,mBAA1B;;AAEA,MAAI,CAAC,WAAW,CAAC,MAAM,CAAC,QAAP,CAAgB,IAAjB,CAAZ,IAAsC,CAAC,UAAU,CAAC,GAAD,CAArD,EAA4D;AAC1D,WACE,aAAA,CAAA,KAAA,EAAA;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAoC,MAAA,KAAK,EAAE;AAA3C,KAAA,E,kCAAA,EACkC,aAAA,CAAA,GAAA,EAAA;AAAG,MAAA,IAAI,EAAE;AAAT,KAAA,EAAyB,WAAzB,CADlC,CADF;AAKD;AACF;AAGD;;;;;AAGA,SAAS,UAAT,CAAoB,GAApB,EAAuB;AACrB,MAAI,mBAAmB,CAAC,OAApB,CAA4B,GAA5B,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,WAAO,IAAP;AACD;;AACD,MAAM,KAAK,GAAG,CAAC,GAAG,IAAI,EAAR,EAAY,KAAZ,CAAkB,mBAAlB,CAAd;;AACA,MAAI,KAAK,IAAK,KAAK,CAAC,CAAD,CAAL,CAAS,MAAT,KAAoB,EAAlC,EAAuC;AACrC,QAAM,YAAY,GAAG,IAAI,IAAJ,CAAS,QAAQ,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CAAR,GAAyB,IAAlC,CAArB;AACA,QAAM,WAAW,GAAG,IAAI,IAAJ,CAAS,MAAM,CAAC,wBAAP,IAAmC,YAA5C,CAApB;;AAEA,QAAI,WAAW,CAAC,WAAD,CAAf,EAA8B;AAAA;AAC5B,UAAM,eAAe,GAAG,OAAO,CAAC,WAAD,EAAc,CAAC,cAAf,CAA/B;;AACA,UAAI,eAAe,GAAG,YAAtB,EAAoC;AAClC,eAAO,IAAP;AACD;AACF;AACF;;AACD,SAAO,KAAP;AACD;;AAGD,SAAS,WAAT,CAAqB,GAArB,EAAwB;AACtB,SAAO,uDAAuD,IAAvD,CAA4D,GAA5D,CAAP;AACF;;AC7DO,IAAM,eAAe,GAAG;AAC7B,EAAA,mBAAmB,EAAE;AADQ,CAAxB;ACIP,IAAA,IAAA,GAAe,YAAY,CAAC;AAC1B,EAAA,cAAc,EAAE,eADU;AAE1B,EAAA,oBAAoB,EAAE,CAAE,mBAAF;AAFI,CAAD,CAA3B","sourcesContent":["import { config, isValidDate, addDays, createElement, CalendarContext } from '@fullcalendar/common'\n\nconst RELEASE_DATE = '<%= releaseDate %>' // for Scheduler\nconst UPGRADE_WINDOW = 365 + 7 // days. 1 week leeway, for tz shift reasons too\nconst LICENSE_INFO_URL = 'http://fullcalendar.io/scheduler/license/'\nconst PRESET_LICENSE_KEYS = [\n  'GPL-My-Project-Is-Open-Source',\n  'CC-Attribution-NonCommercial-NoDerivatives'\n]\nconst CSS = {\n  position: 'absolute' as 'absolute', // for TS+React. ugh.\n  zIndex: 99999,\n  bottom: '1px',\n  left: '1px',\n  background: '#eee',\n  borderColor: '#ddd',\n  borderStyle: 'solid',\n  borderWidth: '1px 1px 0 0',\n  padding: '2px 4px',\n  fontSize: '12px',\n  borderTopRightRadius: '3px'\n}\n\n\nexport function buildLicenseWarning(context: CalendarContext) {\n  let key = context.options.schedulerLicenseKey\n\n  if (!isImmuneUrl(window.location.href) && !isValidKey(key)) {\n    return (\n      <div className='fc-license-message' style={CSS}>\n        Please use a valid license key. <a href={LICENSE_INFO_URL}>More Info</a>\n      </div>\n    )\n  }\n}\n\n\n/*\nThis decryption is not meant to be bulletproof. Just a way to remind about an upgrade.\n*/\nfunction isValidKey(key) {\n  if (PRESET_LICENSE_KEYS.indexOf(key) !== -1) {\n    return true\n  }\n  const parts = (key || '').match(/^(\\d+)-fcs-(\\d+)$/)\n  if (parts && (parts[1].length === 10)) {\n    const purchaseDate = new Date(parseInt(parts[2], 10) * 1000)\n    const releaseDate = new Date(config.mockSchedulerReleaseDate || RELEASE_DATE)\n\n    if (isValidDate(releaseDate)) { // token won't be replaced in dev mode\n      const minPurchaseDate = addDays(releaseDate, -UPGRADE_WINDOW)\n      if (minPurchaseDate < purchaseDate) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n\nfunction isImmuneUrl(url) {\n  return /\\w+:\\/\\/fullcalendar\\.io\\/|\\/examples\\/[\\w-]+\\.html$/.test(url)\n}\n","\nexport const OPTION_REFINERS = {\n  schedulerLicenseKey: String\n}\n","import { createPlugin } from '@fullcalendar/common'\nimport { buildLicenseWarning } from './license'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\n\nexport default createPlugin({\n  optionRefiners: OPTION_REFINERS,\n  viewContainerAppends: [ buildLicenseWarning ]\n})\n"]},"metadata":{},"sourceType":"module"}